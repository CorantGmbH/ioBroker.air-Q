{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\nimport axios from 'axios';\nimport bonjour, { BrowserConfig } from 'bonjour-service';\nimport * as dns from 'dns';\nimport { decrypt } from './decryptAES256';\n\nclass AirQ extends utils.Adapter {\n\n\tprivate _service: any;\n\tprivate _ip: string = '';\n\tprivate _sensorArray:string[]= [];\n\tprivate _id: string= '';\n\tprivate _password: string= '';\n\tprivate _deviceName: string = '';\n\tprivate _stateInterval: any;\n\tprivate _timeout: any;\n\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'air-q',\n\t\t});\n\t\taxios.defaults.timeout = 4000;\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\tprivate onUnload(): void {\n\t\tthis.log.info('AirQ adapter stopped...');\n\t\tthis.clearInterval(this._stateInterval);\n\t\tthis.clearTimeout(this._timeout);\n\t}\n\n\tprivate async onReady(): Promise<void> {\n\t\tif(this.config.password){\n\n\t\t\tthis.clearSensors();\n\t\t\tthis.setState('info.connection', { val: false, ack: true });\n\n\t\t\ttry{\n\t\t\t\tthis.password = this.config.password;\n\t\t\t\tawait this.checkConnectIP();\n\n\t\t\t}catch(error){\n\t\t\t\tthis.log.error(error);\n\t\t\t}\n\t\t\tawait this.setObjectNotExistsAsync(`sensors.health`, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: 'health',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\trole: 'value',\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t\tawait this.setObjectNotExistsAsync(`sensors.performance`, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: 'performance',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\trole: 'value',\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\n\t\t\tthis.sensorArray = await this.getSensorsInDevice();\n\t\t\tfor (const element of this.sensorArray) {\n\t\t\t\tif(element === 'temperature'){\n\t\t\t\t\tawait this.setObjectNotExistsAsync(this.replaceInvalidChars(`sensors.${element}`), {\n\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\tname: element,\n\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\trole: this.setRole(element),\n\t\t\t\t\t\t\tunit: '\u00B0C',\n\t\t\t\t\t\t\tread: true,\n\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t\tawait this.setObjectNotExistsAsync(this.replaceInvalidChars(`sensors.${element}`), {\n\t\t\t\t\ttype: 'state',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: element,\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\trole: this.setRole(element),\n\t\t\t\t\t\tread: true,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\n\t\t\t}\n\t\t\tthis.extendObject('sensors', { common: { name: this.deviceName } });\n\n\t\t\tthis._stateInterval = this.setInterval(async () => {\n\t\t\t\tawait this.setStates();\n\t\t\t}, this.retrievalRate * 1000);\n\t\t}\n\t}\n\n\tprivate setRole(element: string): string {\n\t\tswitch (element) {\n\t\t\tcase 'temperature':\n\t\t\t\treturn 'value.temperature';\n\t\t\tcase 'dewpt':\n\t\t\t\treturn 'value.temperature';\n\t\t\tcase 'humidity':\n\t\t\t\treturn 'value.humidity';\n\t\t\tcase 'pressure':\n\t\t\t\treturn 'level.pressure';\n\t\t\tcase 'co2':\n\t\t\t\treturn 'value.co2';\n\t\t\tdefault:\n\t\t\t\treturn 'value';\n\t\t}\n\t}\n\n\tprivate async checkConnectIP(): Promise<void> {\n\t\ttry{\n\t\t\tif(this.config.connectViaIP){\n\t\t\t\tthis.service= '';\n\t\t\t\tthis.isValidIP(this.config.deviceIP);\n\t\t\t\tthis.id = await this.getShortId()\n\t\t\t\tthis.deviceName = this.id.concat('_air-q');\n\t\t\t}else{\n\t\t\t\tthis.id = this.config.shortId;\n\t\t\t\tthis.deviceName = this.id.concat('_air-q');\n\t\t\t\tthis.service = await this.findAirQInNetwork();\n\t\t\t\tthis.ip= await this.getIp();\n\t\t\t}\n\t\t}catch(error){\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate isValidIP(ip: string): void {\n\t\tconst ip4Address = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n\t\ttry{\n\t\t\tif(ip4Address.test(ip)){\n\t\t\t\tthis.ip = this.config.deviceIP;\n\t\t\t}\n\t\t}catch(error){\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async findAirQInNetwork(): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst instance = new bonjour();\n\t\t\tconst config: BrowserConfig = { type: 'http' };\n\n\t\t\tconst findAirQ = instance.find(config, (service) => {\n\t\t\t\tif (service.name === this.deviceName) {\n\t\t\t\t\tfindAirQ.stop();\n\t\t\t\t\tthis.setState('info.connection', { val: true, ack: true });\n\t\t\t\t\tresolve(service);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._timeout= this.setTimeout(() => {\n\t\t\t\tfindAirQ.stop();\n\t\t\t\treject(new Error('AirQ not found in network'));\n\t\t\t}, 50000);\n\t\t});\n\t}\n\n\tprivate async getShortId(): Promise<string> {\n\t\ttry{\n\t\t\tconst response = await axios.get(`http://${this.ip}/config`, { responseType: 'json' });\n\t\t\tconst data = response.data.content;\n\t\t\tconst decryptedData = decrypt(data, this.password) as unknown;\n\t\t\tif (decryptedData && typeof decryptedData === 'object') {\n\t\t\t\tconst sensorsData = decryptedData as DataConfig;\n\t\t\t\tconst serial = sensorsData.SN;\n\t\t\t\tconst shortID = serial.slice(0,5);\n\t\t\t\tthis.setState('info.connection', { val: true, ack: true });\n\t\t\t\treturn shortID;\n\t\t\t} else {\n\t\t\t\tthrow new Error('DecryptedData is undefined or not an object');\n\t\t\t}\n\t\t}\n\t\tcatch(error){\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async getIp(): Promise<string> {\n\t\ttry{\n\t\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\t\tdns.lookup(this.service.name, 4, (err, address) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(address);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}catch(error){\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async getDataFromAirQ(): Promise<any> {\n\t\ttry {\n\t\t\tconst response = await axios.get(`http://${this.ip}/data`, { responseType: 'json' });\n\t\t\tconst data = response.data.content;\n\t\t\tconst decryptedData = decrypt(data, this.password) as unknown;\n\t\t\tif (decryptedData && typeof decryptedData === 'object') {\n\t\t\t\tconst sensorsData = decryptedData as Sensors;\n\t\t\t\treturn sensorsData;\n\t\t\t} else {\n\t\t\t\tthrow new Error('DecryptedData is undefined or not an object');\n\t\t\t}\n\t\t} catch(error){\n\t\t\tthis.log.error('Error while getting data from AirQ: ' + error);\n\t\t}\n\t}\n\n\tprivate async getAverageDataFromAirQ(): Promise<any> {\n\t\ttry {\n\t\t\tconst response = await axios.get(`http://${this.ip}/average`, { responseType: 'json' });\n\t\t\tconst data = response.data.content;\n\t\t\tconst decryptedData = decrypt(data, this.password) as unknown;\n\t\t\tif (decryptedData && typeof decryptedData === 'object') {\n\t\t\t\tconst sensorsData = decryptedData as Sensors;\n\t\t\t\treturn sensorsData;\n\t\t\t} else {\n\t\t\t\tthrow new Error('DecryptedData is undefined or not an object');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.log.error('Error while getting average data from AirQ: ' + error);\n\t\t}\n\t}\n\n\tprivate async getSensorsInDevice(): Promise<string[]> {\n\t\ttry {\n\t\t\tconst response = await axios.get(`http://${this.ip}/config`, { responseType: 'json' });\n\t\t\tconst data = response.data.content;\n\t\t\tconst decryptedData = decrypt(data, this.password) as unknown;\n\t\t\tif (decryptedData && typeof decryptedData === 'object') {\n\t\t\t\tconst sensorsData = decryptedData as DataConfig;\n\t\t\t\tconst sensors = this.checkParticulates(sensorsData.sensors);\n\t\t\t\treturn sensors;\n\t\t\t} else {\n\t\t\t\tthrow new Error('DecryptedData is undefined or not an object');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.log.error('Error while getting sensors from device: ' + error);\n\t\t}\n\t}\n\n\tprivate checkParticulates(data:string[]): string[]{\n\t\tif (data.includes('particulates')){\n\t\t\tconst pm=['pm1','pm2_5','pm10'];\n\t\t\tconst index = data.indexOf('particulates');\n\t\t\tdata.splice(index, 1);\n\t\t\tdata.splice(index, 0, ...pm);\n\t\t\treturn data;\n\t\t}else{\n\t\t\treturn data;\n\t\t}\n\t}\n\n\tprivate getRetrievalType(): string {\n\t\treturn this.config.retrievalType;\n\t}\n\n\tprivate async setStates(): Promise<void> {\n\t\ttry{\n\t\t\tthis.getRetrievalType() === 'data'\n\t\t\t\t? await this.setSensorData()\n\t\t\t\t: await this.setSensorAverageData();\n\t\t}catch(error){\n\t\t\tthis.log.error('Error while setting states: ' + error);\n\t\t}\n\t}\n\n\tprivate async setSensorData(): Promise<void> {\n\t\ttry{\n\t\t\tconst data = await this.getDataFromAirQ();\n\t\t\tfor (const element of this.sensorArray) {\n\t\t\t\tif(this.config.rawData){\n\t\t\t\t\tconst isNegative = this.checkNegativeValues(data, element);\n\t\t\t\t\tconst cappedValue= isNegative? 0 : data[element][0];\n\t\t\t\t\tawait this.setStateAsync(this.replaceInvalidChars(`sensors.${element}`), { val: cappedValue, ack: true});\n\t\t\t\t}else{\n\t\t\t\t\tawait this.setStateAsync(this.replaceInvalidChars(`sensors.${element}`), { val: data[element][0], ack: true });\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setStateAsync('sensors.health', { val: data.health / 10, ack: true });\n\t\t\tthis.setStateAsync('sensors.performance', { val: data.performance / 10, ack: true });\n\t\t}catch(error){\n\t\t\tthis.log.error('Error while setting data from AirQ: ' + error);\n\t\t}\n\t}\n\n\tprivate async setSensorAverageData(): Promise<void> {\n\t\ttry{\n\t\t\tconst data = await this.getAverageDataFromAirQ();\n\t\t\tfor (const element of this.sensorArray) {\n\t\t\t\tif(this.config.rawData){\n\t\t\t\t\tconst isNegative = this.checkNegativeValues(data, element);\n\t\t\t\t\tconst cappedValue= isNegative? 0 : data[element][0];\n\t\t\t\t\tawait this.setStateAsync(this.replaceInvalidChars(`sensors.${element}`), { val: cappedValue, ack: true});\n\t\t\t\t}else{\n\t\t\t\t\tawait this.setStateAsync(this.replaceInvalidChars(`sensors.${element}`), { val: data[element][0], ack: true });\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setStateAsync('sensors.health', { val: data.health / 10, ack: true });\n\t\t\tthis.setStateAsync('sensors.performance', { val: data.performance / 10, ack: true });\n\t\t}catch(error){\n\t\t\tthis.log.error('Error while setting average data from AirQ: ' + error);\n\t\t}\n\t}\n\n\tprivate checkNegativeValues(data:Sensors, element:string): boolean {\n\t\tif(data[element][0]< 0 && element !== 'temperature'){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate replaceInvalidChars(name: string): string {\n\t\treturn name.replace(this.FORBIDDEN_CHARS, '_');\n\t}\n\n\tprivate clearSensors(): void {\n\t\tthis.getStatesOf('sensors', async (err, states) => {\n\t\t\tif (states) {\n\t\t\t\tfor (const state of states) {\n\t\t\t\t\tthis.delObject(state._id);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tthis.log.error('Error while clearing sensors: ' + err);\n\t\t\t}\n\t\t});\n\t}\n\n\tset service(value: any) {\n\t\tthis._service = value;\n\t}\n\n\tget service(): any {\n\t\treturn this._service;\n\t}\n\n\tset ip(value: string) {\n\t\tthis._ip = value;\n\t}\n\n\tget ip(): string {\n\t\treturn this._ip;\n\t}\n\n\tset sensorArray(value: string[]) {\n\t\tthis._sensorArray = value;\n\t}\n\n\tget sensorArray(): string[] {\n\t\treturn this._sensorArray;\n\t}\n\n\tset id(value: string) {\n\t\tthis._id = value;\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tset password(value: string) {\n\t\tthis._password = value;\n\t}\n\n\tget password(): string {\n\t\treturn this._password;\n\t}\n\n\tset deviceName(value: string) {\n\t\tthis._deviceName = value;\n\t}\n\n\tget deviceName(): string {\n\t\treturn this._deviceName;\n\t}\n\n\tget retrievalRate(): number {\n\n\t\tif(this.config.retrievalRate > 3600){\n\t\t\treturn 3600;\n\t\t}else if(this.config.retrievalRate < 2){\n\t\t\treturn 2;\n\t\t}else{\n\t\t\treturn this.config.retrievalRate;\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new AirQ(options);\n} else {\n\t(() => new AirQ())();\n}\n"],
  "mappings": "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",
  "names": ["axios", "bonjour"]
}
